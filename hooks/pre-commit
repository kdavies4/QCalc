#!/bin/bash

# ------------------------------------------------------------------------------
# Check for file names with non-ascii characters.
# From pre-commit.sample
if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# If you want to allow non-ascii filenames set this variable to true.
allownonascii=$(git config hooks.allownonascii)

# Cross platform projects tend to avoid non-ascii filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test "$(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0')"
then
	echo "Error: Attempt to add a non-ascii file name."
	echo
	echo "This can cause problems if you want to work"
	echo "with people on other platforms."
	echo
	echo "To be portable it is advisable to rename the file ..."
	echo
	echo "If you know what you are doing you can disable this"
	echo "check using:"
	echo
	echo "  git config hooks.allownonascii true"
	echo
	exit 1
fi

# ------------------------------------------------------------------------------
# Check for non-ascii characters in the Modelica files.
# Based on https://gist.github.com/danbeaulieu/2587927

mofiles=$(find . \( -name '*.mo' \))
if $(grep -Pq "[^\x00-\x7F]" $mofiles); then
    echo "Aborting commit due to non-ascii characters in Modelica files:"
    grep --color='auto' -P -n '[^\x00-\x7F]' $mofiles
    exit 1
fi

# ------------------------------------------------------------------------------
# Check for errors in the Modelica code.
# Based on http://www.sitepoint.com/git-hooks-fun-profit/
git diff --cached --name-status --diff-filter=ACMR | while read STATUS FILE; do
    if [[ ${FILE: -3} == ".mo" ]]; then
        if [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
            .git/hooks/moparser -l "$FILE" 1> /dev/null
        else
            .git/hooks/moparser.exe -l "$FILE" 1> /dev/null
        fi
        if [ $? -ne 0 ]; then
            echo "Aborting commit due to files with syntax errors" >&2
            exit 1
        fi
    fi
done

# ------------------------------------------------------------------------------
# Check for errors in the Python code.
# Based on http://www.sitepoint.com/git-hooks-fun-profit/
git diff --cached --name-status --diff-filter=ACMR | while read STATUS FILE; do
    if [[ ${FILE: -3} == ".py" ]]; then
        python -m py_compile "$FILE" 1> /dev/null
        if [ $? -ne 0 ]; then
            echo "Aborting commit due to errors in Python code" >&2
            exit 1
        fi
    fi
done

# ------------------------------------------------------------------------------
# Remove simulation files in case they're generated inside the repo.
for f in dymosim dymosim.exe buildlog.txt dsfinal.txt dsin.txt dslog.txt dsmodel.c dsmodel.mof dsu.txt request request. status status. success success. "dsmodel*.c"; do
    find . -type f -name "$f" -exec rm -f {} \;
done

# ------------------------------------------------------------------------------
# Trim trailing whitespace.
# Uses https://github.com/dietmarw/trimtrailingwhitespaces
# ttws QCalc >/dev/null
# Slow (no option to scan files individually).
# Use tidy.py manually instead.
